#!/bin/bash

# https://openqa-bites.github.io/openqa/openqa-cli-cheat-sheet/
# TODO: qa-sync should call qa-sync-allow only once, maybe add a --no-check to intermediate calls

TARGET=qa # defined in ~/.ssh/config
HOST=
HOST_OPT=
SKIP_CONFIRMATION=0
MY_HOST=http://rmarliere-openqa.qe.prg2.suse.org

_set_host() {
	# echo $HOST >&2
	TARGET=qa
	case "$HOST" in
	ooo | o3 | *openqa.opensuse.org)
		HOST=https://openqa.opensuse.org
		HOST_OPT="--host $HOST"
		;;
	osd | *openqa.suse.de)
		HOST=https://openqa.suse.de
		HOST_OPT="--host $HOST"
		;;
	local)
		HOST=
		HOST_OPT=
		;;
	*)
		HOST=$MY_HOST
		HOST_OPT="--host $HOST"
		;;
	esac
}

_host_check() {
	_set_host
	if [[ $HOST != "$MY_HOST" ]]; then
		echo "error: HOST is not $MY_HOST" >&2
		return 1
	fi
	return 0
}

_qa() {
	local CMD=("$@")
	shift

	if [[ $SKIP_CONFIRMATION -eq 0 ]]; then
		read -rp "$(printf "\n%s\n\nConfirm? [y|N] " "${CMD[*]}")" ans
		ans=${ans:-N}
		if [[ ! "$ans" =~ ^[Yy]$ ]]; then
			return 1
		fi
	fi

	"${CMD[@]}"
}

_qa-get-build-jobs() {
	_set_host

	local URL_HOST
	local QUERY
	local JOBS
	local URL

	URL="$(printf '%b\n' "${1//%/\\x}")"
	URL_HOST=$(echo "$URL" | awk -F '/tests' '{print $1}')
	QUERY=$(echo "${URL##*\?}" | sed 's/&/ /g')

	HOST=$URL_HOST qa api jobs/overview $QUERY | jq -r '.[].id'
}

qa() {
	_set_host
	local CMD=$1
	shift
	_qa openqa-cli $CMD $HOST_OPT "$@"
}

qa-load-templates() {
	_host_check || return
	_qa openqa-load-templates $HOST_OPT "$@"
}

qa-dump-templates() {
	_set_host

	local GROUP=$1
	shift

	if [[ -z $GROUP ]]; then
		echo "usage: qa-dump GROUP"
		return 1
	fi

	_qa openqa-dump-templates $HOST_OPT --group "$GROUP" --json "$@"
}

qa-load-schedule() {
	_host_check || return

	GID=$1
	shift
	TEMPLATE=$1
	shift
	[[ -z $GID || -z $TEMPLATE ]] && return 1

	qa api -X POST job_templates_scheduling/"$GID" schema=JobTemplates-01.yaml --param-file template="$TEMPLATE"
}

qa-clone-job() {
	_set_host

	local NS='_GROUP=0 BUILD+="rbmarliere"' # _OBSOLETE=1
	local SSH="ssh $TARGET -- "
	local SKIP_DOWNLOAD=--skip-download
	local WITHIN_INSTANCE=
	local SKIP_UPDATES=
	local SKIP_DEPS=

	usage() {
		echo "usage: qa-clone [options] JOB_NUMBER"
		echo "  -s  --no-skip-download          Same openqa-clone-job option"
		echo "  -S  --no-ssh                    Don't run command through ssh to $TARGET"
		echo "  -u  --unnamed                   Don't append '$NS' to the test environment"
		echo "  -U  --skip-updates              Use the special variables to skip maintenance updates"
		echo "  -D  --skip-chained-deps         Same as openqa-clone-job option"
		echo "  -w  --within-instance           Same as openqa-clone-job option"
	}

	if [[ $# -lt 1 ]]; then
		usage
		return 1
	fi

	while [[ $# -gt 0 ]]; do
		case "$1" in
		-h | --help)
			usage
			return 0
			;;
		-s | --no-skip-download) SKIP_DOWNLOAD= ;;
		-S | --ssh) SSH= ;;
		-u | --unnamed) NS= ;;
		-U | --skip-updates) SKIP_UPDATES="SKIP_MAINTENANCE_UPDATES=1 PUBLIC_CLOUD_IGNORE_EMPTY_REPO=1 PUBLIC_CLOUD_SKIP_MU=1" ;;
		-w | --within-instance)
			HOST_OPT=
			WITHIN_INSTANCE="--within-instance $HOST"
			;;
		-D | --skip-chained-deps)
			SKIP_DEPS=--skip-chained-deps
			;;
		*) break ;;
		esac
		shift
	done

	local JOB=$1
	shift

	if [[ -n "$WITHIN_INSTANCE" ]]; then
		SSH=
		if [[ ! "$JOB" =~ ^-?[0-9]+$ ]]; then
			echo "error: JOB should be a number" >&2
			return 1
		fi
	fi

	_qa $SSH openqa-clone-job $HOST_OPT $WITHIN_INSTANCE $SKIP_DEPS $SKIP_DOWNLOAD $JOB $@ $NS $SKIP_UPDATES
}

qa-clone-build() {
	local CLONE_ALL=1
	local CLONE_FAILED=
	local CLONE_SKIPPED=
	local WITHIN_INSTANCE=0
	local LIMIT=0
	local NO_CONFIRM=
	local GROUP=
	local URL=
	local QA_CLONE_ARG=()
	local QA_CLONE_OPT=()

	usage() {
		echo "usage: qa-clone-build [options] URL -- [qa-clone-job options] [variables]"
		echo ""
		echo "  -F  --failed                    Clone failed jobs"
		echo "  -S  --skipped                   Clone skipped jobs"
		echo "  -c  --no-confirm                Don't ask for individual confirmations"
		echo "  -g  --group X                   Assign cloned jobs to _GROUP_ID=X"
		echo "  -l  --limit X                   Limit X jobs"
		echo "  -w  --within-instance           Clone within openQA instance"
	}

	if [[ $# -lt 1 ]]; then
		usage
		return 1
	fi

	while [[ $# -gt 0 ]]; do
		case "$1" in
		--)
			shift
			# parse arguments and options to qa-clone-job
			while [[ $# -gt 0 ]]; do
				if [[ "$1" == -* ]]; then
					QA_CLONE_OPT+=("$1")
				else
					QA_CLONE_ARG+=("$1")
				fi
				shift
			done
			break
			;;
		-h | --help)
			usage
			return 0
			;;
		-F | --failed)
			CLONE_FAILED=1
			CLONE_ALL=0
			;;
		-S | --skipped)
			CLONE_SKIPPED=1
			CLONE_ALL=0
			;;
		-w | --within-instance)
			WITHIN_INSTANCE=1
			;;
		-l | --limit)
			shift
			LIMIT=$1
			;;
		-c | --no-confirm)
			NO_CONFIRM=1
			;;
		-g | --group)
			shift
			GROUP="_GROUP_ID=$1"
			;;
		*)
			if [[ -z "$URL" ]]; then
				URL="$1"
			else
				echo "error: multiple URL provided ($URL and $1)" >&2
				return 1
			fi
			;;
		esac
		shift
	done

	local JOBS
	mapfile -t JOBS < <(_qa-get-build-jobs "$URL")
	echo "found ${#JOBS[@]} jobs"

	local STATUS=""
	local CLONE_CUR=0
	local CUR=1
	for ID in "${JOBS[@]}"; do
		echo "ID=$ID :: $CUR/${#JOBS[@]}"
		if [[ $CLONE_ALL -ne 1 ]]; then
			STATUS=$(qa jobs/"$ID" | jq -r '.job.result')
			[[ $STATUS == "failed" && $CLONE_FAILED ]] && CLONE_CUR=1
			[[ $STATUS == "skipped" && $CLONE_SKIPPED ]] && CLONE_CUR=1
		fi
		if [[ $CLONE_ALL -eq 1 || $CLONE_CUR -eq 1 ]]; then
			echo "cloning $ID..."
			[[ -n $NO_CONFIRM ]] && SKIP_CONFIRMATION=1
			if [[ $WITHIN_INSTANCE -eq 1 ]]; then
				echo qa-clone-job -w "${QA_CLONE_OPT[@]}" "$ID" "${QA_CLONE_ARG[@]}" $GROUP
			else
				ID=${URL//overview*/$ID}
				qa-clone-job "${QA_CLONE_OPT[@]}" "$ID" "${QA_CLONE_ARG[@]}" $GROUP
			fi
			[[ -n $NO_CONFIRM ]] && SKIP_CONFIRMATION=1
		fi
		CLONE_CUR=0
		((CUR++))

		if [[ $LIMIT -gt 0 && $CUR -gt $LIMIT ]]; then
			echo "Reached LIMIT of $LIMIT"
			break
		fi
	done
	SKIP_CONFIRMATION=0
}

qa-get-job() {
	local ID=$1
	shift
	[[ -z $ID ]] && return 1
	qa api jobs/"$ID"
}

qa-restart-job() {
	local ID=$1
	shift
	[[ -z $ID ]] && return 1
	local SKIP_PARENTS=
	if [[ $1 == -s ]]; then
		SKIP_PARENTS=skip_parents=1
	fi
	qa api -X POST jobs/"$ID"/restart "$SKIP_PARENTS"
}

qa-start-job() {
	qa api -X POST isos BUILD="$(date +"%Y%m%d")" "$@"
	# ARCH="x86_64" DISTRI="microos" FLAVOR="MicroOS-Image" VERSION="Tumbleweed" HDD_1="openSUSE-MicroOS.x86_64-kvm-and-xen_nohealthchecker.qcow2"
}

qa-stop-job() {
	local ID=$1
	shift
	[[ -z $ID ]] && return 1
	qa api -X POST jobs/"$ID"/cancel
}

qa-stop-build() {
	local URL=$1
	shift
	[[ -z $URL ]] && return 1

	local JOBS
	mapfile -t JOBS < <(_qa-get-build-jobs "$URL")
	echo "found ${#JOBS[@]} jobs"

	SKIP_CONFIRMATION=1
	I=1
	for ID in "${JOBS[@]}"; do
		echo "stopping ID=$ID... :: $CUR/${#JOBS[@]}"
		qa-stop-job "$ID"
		((I++))
	done
	SKIP_CONFIRMATION=0
}

qa-delete-job() {
	local ID=$1
	shift
	[[ -z $ID ]] && return 1
	qa api -X DELETE jobs/"$ID"
}

qa-sync-allow() {
	echo fixing $TARGET:/var/lib/openqa/tests permissions...
	ssh $TARGET "chown geekotest:nogroup -R /var/lib/openqa/tests/"
	ssh $TARGET "chmod g+w /var/lib/openqa/tests/*"
}

qa-sync-casedir() {
	local CASEDIR=$1
	shift
	[[ -z $CASEDIR ]] && return 1
	_qa rsync -rltDv --delete "$CASEDIR"/ $TARGET:/var/lib/openqa/tests/"$(basename "$(dirname "$(realpath "$CASEDIR")")")" || return

	echo linking suse needles...
	for product in alp sle sle-micro; do
		local link=/var/lib/openqa/tests/os-autoinst-distri-opensuse/products/$product/needles
		ssh $TARGET "ln -sfn /var/lib/openqa/tests/os-autoinst-needles-sles/ $link"
	done

	echo linking opensuse needles...
	for product in microos opensuse leap-micro; do
		local link=/var/lib/openqa/tests/os-autoinst-distri-opensuse/products/$product/needles
		ssh $TARGET "ln -sfn /var/lib/openqa/tests/os-autoinst-needles-opensuse/ $link"
	done

	qa-sync-allow
}

qa-sync-needles() {
	local NEEDLES=$1
	shift
	[[ -z $NEEDLES ]] && return 1

	_qa rsync -rltDv --delete "$NEEDLES"/ $TARGET:/var/lib/openqa/tests/"$(basename "$(dirname "$(realpath "$NEEDLES")")")" || return

	qa-sync-allow
}

qa-sync-needles-update() {
	git -C "$HOME"/src/os-autoinst/os-autoinst-needles-opensuse/master pull
	qa-sync-needles "$HOME"/src/os-autoinst/os-autoinst-needles-opensuse/master
	git -C "$HOME"/suse.de/openqa/os-autoinst-needles-sles/master pull
	qa-sync-needles "$HOME"/suse.de/openqa/os-autoinst-needles-sles/master
}

qa-sync() {
	local IGNORE_NEEDLES=
	usage() {
		echo "usage: qa-sync [options] CASEDIR [NEEDLES]"
		echo "  -h  --help                    Display this message"
		echo "  -f  --force                   Ignore NEEDLES argument"
		echo "  If NEEDLES is empty, qa-sync-needles-update will be called first"
	}
	while [[ $# -gt 0 ]]; do
		case "$1" in
		-h | --help)
			usage
			return 0
			;;
		-f | --force) IGNORE_NEEDLES=1 ;;
		*) break ;;
		esac
		shift
	done
	local CASEDIR=$1
	shift
	local NEEDLES=$1
	shift
	if [[ -z $CASEDIR ]]; then
		usage
		return 1
	fi
	if [[ $IGNORE_NEEDLES -ne 1 ]]; then
		if [[ -z $NEEDLES ]]; then
			qa-sync-needles-update
		else
			qa-sync-needles "$NEEDLES"
		fi
	fi
	qa-sync-casedir "$CASEDIR"
}

qa-link() {
	local DEST=$1
	shift
	[[ -z $DEST ]] && return 1

	local LINK=/var/lib/openqa/tests/"$(basename "$(dirname "$(realpath "$DEST")")")"
	sudo ln -sfn "$(realpath "$DEST")" "$LINK"

	echo linking suse needles...
	for product in alp sle sle-micro; do
		ln -sfn /var/lib/openqa/tests/os-autoinst-needles-sles /var/lib/openqa/tests/os-autoinst-distri-opensuse/products/$product/needles
	done

	echo linking opensuse needles...
	for product in microos opensuse leap-micro; do
		ln -sfn /var/lib/openqa/tests/os-autoinst-needles-opensuse /var/lib/openqa/tests/os-autoinst-distri-opensuse/products/$product/needles
	done

	sudo chown geekotest:root -R /var/lib/openqa/tests/
}

qa-schedule() {
	qa schedule $@
}

qa-sql() {
	ssh -t $TARGET -- su - postgres -c \'psql -d openqa\'
}

qa-vnc() {
	LOCAL_PORT=6000
	REMOTE_PORT=5991
	REMOTE_HOST=$TARGET
	WORKER=localhost

	usage() {
		echo "usage: qa-vnc [options]"
		echo "  -p  --port             Local port ($LOCAL_PORT)"
		echo "  -P  --remote-port      Remote port ($REMOTE_PORT)"
		echo "  -t  --target           Remote host ($REMOTE_HOST)"
		echo "  -w  --worker           Target worker ($WORKER)"
	}

	while [[ $# -gt 0 ]]; do
		case "$1" in
		-h | --help)
			usage
			return 0
			;;
		-p | --port)
			shift
			LOCAL_PORT="$1"
			;;
		-P | --remote-port)
			shift
			REMOTE_PORT="$1"
			;;
		-t | --target)
			shift
			REMOTE_HOST="$1"
			;;
		-w | --worker)
			shift
			WORKER="$1"
			;;
		*) break ;;
		esac
		shift
	done

	ssh \
		-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
		-NL $LOCAL_PORT:$WORKER:$REMOTE_PORT $REMOTE_HOST &
	SSH_PID=$!

	sleep 5
	vncviewer -shared localhost:$LOCAL_PORT
	kill $SSH_PID
}
